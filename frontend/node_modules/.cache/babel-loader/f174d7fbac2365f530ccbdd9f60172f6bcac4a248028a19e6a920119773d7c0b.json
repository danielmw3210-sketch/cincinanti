{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API Response Error:', error);\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // Server responded with error status\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || 'An error occurred';\n    throw new Error(message);\n  } else if (error.request) {\n    // Request was made but no response received\n    throw new Error('No response from server. Please check your connection.');\n  } else {\n    // Something else happened\n    throw new Error(error.message || 'An unexpected error occurred');\n  }\n});\nexport const fetchForecast = async (symbol, lookbackHours = 24) => {\n  try {\n    const response = await api.post('/forecast', {\n      symbol,\n      timeframe: '1m',\n      lookback_hours: lookbackHours\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch forecast: ${error.message}`);\n  }\n};\nexport const fetchSymbols = async () => {\n  try {\n    const response = await api.get('/symbols');\n    return response.data.symbols;\n  } catch (error) {\n    throw new Error(`Failed to fetch symbols: ${error.message}`);\n  }\n};\nexport const fetchHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch health status: ${error.message}`);\n  }\n};\nexport const fetchModelInfo = async () => {\n  try {\n    const response = await api.get('/model/info');\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch model info: ${error.message}`);\n  }\n};\nexport const retrainModel = async () => {\n  try {\n    const response = await api.post('/retrain');\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to retrain model: ${error.message}`);\n  }\n};\nexport const fetchDataSummary = async (symbol = 'BTC/USDT', hoursBack = 24) => {\n  try {\n    const response = await api.get('/data/summary', {\n      params: {\n        symbol,\n        hours_back: hoursBack\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch data summary: ${error.message}`);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response$data","_error$response$data2","message","data","detail","Error","fetchForecast","symbol","lookbackHours","post","timeframe","lookback_hours","fetchSymbols","get","symbols","fetchHealth","fetchModelInfo","retrainModel","fetchDataSummary","hoursBack","params","hours_back"],"sources":["/workspace/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error);\n    \n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.detail || error.response.data?.error || 'An error occurred';\n      throw new Error(message);\n    } else if (error.request) {\n      // Request was made but no response received\n      throw new Error('No response from server. Please check your connection.');\n    } else {\n      // Something else happened\n      throw new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n);\n\nexport const fetchForecast = async (symbol, lookbackHours = 24) => {\n  try {\n    const response = await api.post('/forecast', {\n      symbol,\n      timeframe: '1m',\n      lookback_hours: lookbackHours,\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch forecast: ${error.message}`);\n  }\n};\n\nexport const fetchSymbols = async () => {\n  try {\n    const response = await api.get('/symbols');\n    return response.data.symbols;\n  } catch (error) {\n    throw new Error(`Failed to fetch symbols: ${error.message}`);\n  }\n};\n\nexport const fetchHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch health status: ${error.message}`);\n  }\n};\n\nexport const fetchModelInfo = async () => {\n  try {\n    const response = await api.get('/model/info');\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch model info: ${error.message}`);\n  }\n};\n\nexport const retrainModel = async () => {\n  try {\n    const response = await api.post('/retrain');\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to retrain model: ${error.message}`);\n  }\n};\n\nexport const fetchDataSummary = async (symbol = 'BTC/USDT', hoursBack = 24) => {\n  try {\n    const response = await api.get('/data/summary', {\n      params: { symbol, hours_back: hoursBack }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch data summary: ${error.message}`);\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}