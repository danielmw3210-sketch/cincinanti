{"ast":null,"code":"var _jsxFileName = \"/workspace/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport TickerDisplay from './components/TickerDisplay';\nimport ForecastPanel from './components/ForecastPanel';\nimport SymbolSelector from './components/SymbolSelector';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport { fetchForecast, fetchSymbols, fetchHealth } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 20px;\n`;\n_c = AppContainer;\nconst MainContent = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 400px;\n  gap: 20px;\n  \n  @media (max-width: 1024px) {\n    grid-template-columns: 1fr;\n    gap: 15px;\n  }\n`;\n_c2 = MainContent;\nconst LeftPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n_c3 = LeftPanel;\nconst RightPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n_c4 = RightPanel;\nfunction App() {\n  _s();\n  const [forecasts, setForecasts] = useState({});\n  const [selectedSymbol, setSelectedSymbol] = useState('BTC/USDT');\n  const [availableSymbols, setAvailableSymbols] = useState(['BTC/USDT']);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isHealthy, setIsHealthy] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  // Fetch available symbols on component mount\n  useEffect(() => {\n    const loadSymbols = async () => {\n      try {\n        const symbols = await fetchSymbols();\n        setAvailableSymbols(symbols);\n      } catch (error) {\n        console.error('Failed to load symbols:', error);\n        toast.error('Failed to load available symbols');\n      }\n    };\n    loadSymbols();\n  }, []);\n\n  // Health check on mount\n  useEffect(() => {\n    const checkHealth = async () => {\n      try {\n        const health = await fetchHealth();\n        setIsHealthy(health.model_loaded);\n        if (!health.model_loaded) {\n          toast.warning('Model is not loaded. Some features may not work.');\n        }\n      } catch (error) {\n        console.error('Health check failed:', error);\n        toast.error('Failed to connect to the API');\n      }\n    };\n    checkHealth();\n  }, []);\n\n  // Auto-refresh forecasts every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (selectedSymbol && isHealthy) {\n        handleForecast(selectedSymbol);\n      }\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [selectedSymbol, isHealthy]);\n  const handleForecast = async (symbol = selectedSymbol) => {\n    if (!symbol) return;\n    setIsLoading(true);\n    try {\n      const forecastData = await fetchForecast(symbol);\n      setForecasts(prev => ({\n        ...prev,\n        [symbol]: forecastData\n      }));\n      setLastUpdate(new Date());\n      toast.success(`Forecast updated for ${symbol}`);\n    } catch (error) {\n      console.error('Forecast failed:', error);\n      toast.error(`Failed to get forecast for ${symbol}: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSymbolChange = symbol => {\n    setSelectedSymbol(symbol);\n    if (isHealthy) {\n      handleForecast(symbol);\n    }\n  };\n  const currentForecast = forecasts[selectedSymbol];\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isHealthy: isHealthy,\n      lastUpdate: lastUpdate,\n      onRefresh: () => handleForecast(),\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(LeftPanel, {\n        children: /*#__PURE__*/_jsxDEV(TickerDisplay, {\n          forecast: currentForecast,\n          symbol: selectedSymbol,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RightPanel, {\n        children: [/*#__PURE__*/_jsxDEV(SymbolSelector, {\n          symbols: availableSymbols,\n          selectedSymbol: selectedSymbol,\n          onSymbolChange: handleSymbolChange,\n          disabled: !isHealthy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ForecastPanel, {\n          forecast: currentForecast,\n          symbol: selectedSymbol,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      newestOnTop: false,\n      closeOnClick: true,\n      rtl: false,\n      pauseOnFocusLoss: true,\n      draggable: true,\n      pauseOnHover: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M+7pON7bG0Tq3GAF13NZ79YI4Ho=\");\n_c5 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"MainContent\");\n$RefreshReg$(_c3, \"LeftPanel\");\n$RefreshReg$(_c4, \"RightPanel\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ToastContainer","toast","Header","TickerDisplay","ForecastPanel","SymbolSelector","LoadingSpinner","fetchForecast","fetchSymbols","fetchHealth","jsxDEV","_jsxDEV","AppContainer","div","_c","MainContent","_c2","LeftPanel","_c3","RightPanel","_c4","App","_s","forecasts","setForecasts","selectedSymbol","setSelectedSymbol","availableSymbols","setAvailableSymbols","isLoading","setIsLoading","isHealthy","setIsHealthy","lastUpdate","setLastUpdate","loadSymbols","symbols","error","console","checkHealth","health","model_loaded","warning","interval","setInterval","handleForecast","clearInterval","symbol","forecastData","prev","Date","success","message","handleSymbolChange","currentForecast","children","onRefresh","fileName","_jsxFileName","lineNumber","columnNumber","forecast","onSymbolChange","disabled","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","_c5","$RefreshReg$"],"sources":["/workspace/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Header from './components/Header';\nimport TickerDisplay from './components/TickerDisplay';\nimport ForecastPanel from './components/ForecastPanel';\nimport SymbolSelector from './components/SymbolSelector';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport { fetchForecast, fetchSymbols, fetchHealth } from './services/api';\n\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 20px;\n`;\n\nconst MainContent = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 400px;\n  gap: 20px;\n  \n  @media (max-width: 1024px) {\n    grid-template-columns: 1fr;\n    gap: 15px;\n  }\n`;\n\nconst LeftPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst RightPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nfunction App() {\n  const [forecasts, setForecasts] = useState({});\n  const [selectedSymbol, setSelectedSymbol] = useState('BTC/USDT');\n  const [availableSymbols, setAvailableSymbols] = useState(['BTC/USDT']);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isHealthy, setIsHealthy] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  // Fetch available symbols on component mount\n  useEffect(() => {\n    const loadSymbols = async () => {\n      try {\n        const symbols = await fetchSymbols();\n        setAvailableSymbols(symbols);\n      } catch (error) {\n        console.error('Failed to load symbols:', error);\n        toast.error('Failed to load available symbols');\n      }\n    };\n\n    loadSymbols();\n  }, []);\n\n  // Health check on mount\n  useEffect(() => {\n    const checkHealth = async () => {\n      try {\n        const health = await fetchHealth();\n        setIsHealthy(health.model_loaded);\n        if (!health.model_loaded) {\n          toast.warning('Model is not loaded. Some features may not work.');\n        }\n      } catch (error) {\n        console.error('Health check failed:', error);\n        toast.error('Failed to connect to the API');\n      }\n    };\n\n    checkHealth();\n  }, []);\n\n  // Auto-refresh forecasts every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (selectedSymbol && isHealthy) {\n        handleForecast(selectedSymbol);\n      }\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [selectedSymbol, isHealthy]);\n\n  const handleForecast = async (symbol = selectedSymbol) => {\n    if (!symbol) return;\n\n    setIsLoading(true);\n    try {\n      const forecastData = await fetchForecast(symbol);\n      setForecasts(prev => ({\n        ...prev,\n        [symbol]: forecastData\n      }));\n      setLastUpdate(new Date());\n      toast.success(`Forecast updated for ${symbol}`);\n    } catch (error) {\n      console.error('Forecast failed:', error);\n      toast.error(`Failed to get forecast for ${symbol}: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSymbolChange = (symbol) => {\n    setSelectedSymbol(symbol);\n    if (isHealthy) {\n      handleForecast(symbol);\n    }\n  };\n\n  const currentForecast = forecasts[selectedSymbol];\n\n  return (\n    <AppContainer>\n      <Header \n        isHealthy={isHealthy}\n        lastUpdate={lastUpdate}\n        onRefresh={() => handleForecast()}\n        isLoading={isLoading}\n      />\n      \n      <MainContent>\n        <LeftPanel>\n          <TickerDisplay \n            forecast={currentForecast}\n            symbol={selectedSymbol}\n            isLoading={isLoading}\n          />\n        </LeftPanel>\n        \n        <RightPanel>\n          <SymbolSelector\n            symbols={availableSymbols}\n            selectedSymbol={selectedSymbol}\n            onSymbolChange={handleSymbolChange}\n            disabled={!isHealthy}\n          />\n          \n          <ForecastPanel\n            forecast={currentForecast}\n            symbol={selectedSymbol}\n            isLoading={isLoading}\n          />\n        </RightPanel>\n      </MainContent>\n\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </AppContainer>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}